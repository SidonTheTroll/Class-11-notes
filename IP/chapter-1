25/04/23

Storage: Primary and secondary 

Primary: RAM and ROM 

Booting: Booting is the process of starting up a computer and loading the necessary software to make it operational. It includes hardware checks, loading the oprating system, and initializing system components. 

The OS is stored in the hard disk. 

Charles Babbage is known as the father of computer because he designed and developed the first mechanical computer in the 19th century. 

The most important input device is the keyboard. 

Input devices: Keyboard, mouse, joystick, scanner, light pen, mecrophone, etc. 

Output devices: Monitor, speaker, printer, headphones, projector, etc. 

The CPU is logically divided into three parts, i.e., ALU, CU and MU. 

Arithmetic Logic Unit: performs methematical operations such as addition, multiplication, subtraction and division. It also performs logical operations such as comparisions and Boolean (comparision between two values or variables that have only two possible values, true or false) operations. 

Control Unit: controls the flow of data between the CPU and other components of the computer. 

Memory Unit: stores data or instructions temporarly or permanently including primarry and secondary memory. 

The CPU powers and operates/communicates with all peripheral devices. 

Drivers are required to use any peripheral device. 
	They usually come in compact disks or can be installed from the internet.
	These drivers are an introductory part between computer and peripherals and requires an installation process to be usable. 

Plug and play devices: the devices that are designed to be recognised and configured automatically by a computer without the user matually configure any settings or install additional drivers. Eg.- pen drive, mobile phones, etc. 



26/04/23

Software: System (operating system) and application (depends on requirements)

OS is the basic knowledge of the computer. 

Windows was made by microsoft first released in 1985. 

Pirated software is allowed for individual use but not for businesses. 

Some OS are free but they dont have all the functionalities. 

Android is linux but with modifications. 

Windows is called windows because it depicts a window but can't touch the things inside it. 

Application software is also installed in the secondary memory. 

Upon pressing the power button, OS copies from secondary to the primary memory. 

Booting: warm and cold. 

Cold booting: computer was turned off at first 
Warm booting: shut down and start again (restart) 

RAM
	Its full form is Random Access Memory 
	It is a primary memory. 
	Has a particular size.
	It is a temporary storage. 
	Overloading leads to hangs and crashes.

Downloaded files are first stored in the RAM and then exported to the secondary memory. 

Increasing the RAM is on permanent solution to use a lot of softwares together. 

CD: Compact disk 
DVD: Digital Versatile Disk 

Some disks are rewritable but can only be done a few times and rewriting it needs to fully wipe the memory. 



27/04/23

Railway systems/services use DOS 

DOS: Disk Operating System 

There was no concept of hard disk in the old days so the OS is stored in a CD. 

Till now, modern PC can also run DOS but the disk is not required as the OS can be stored in the hard disk. 

Linux is the most popular among free OS. 

Reasons to use linux: 
	Virus-free 
	Modifiable 
	Free to use
	Lightweight 


>> Machine language

A computer can only understand signals, i.e., high voltage (1) and low voltage (0) 

"High voltage" and "low voltage" is hard to read and write in a human scale because its time consuming, so these are written as binary. 

All the alphabets, numbers, punctuation marks and space are only recognised as a picture in a computer and each one of them is recognised as a particular signal. 

>> Binary to decimal 

A = 1000001 

1*2^6 + 0*2^5 + 0*2^4 + 0*2^4 + 0*2^3 + 0*2^2 + 1*2^0 
=> 65 

Therefore, B = 66 

ASCII, abbreviated from American Standard Code for Information Interchange, is a character encoding standard for electronic communication. ASCII codes represent text in computers, telecommunications equipment, and other devices. 

95 is the ASCII value for '_' 

Upon division of 97 with 2 and the other quotients and getting the remainder, we get the number 010011; this is called ascii code. 

>> High level language

Computer languages (C, C++, JS, Java, Python, etc) are called high level languages.

Compiler and interpreter translates high level language into machine code. 



public class Acid {
    public static void main(String[] args) {
        int a, b = 5, c = 10;
        a = b + c;
        System.out.println(a);
    }
}


The above code (written in Java) is called source code, upon inputing it in a compiler or interpreter, it is translated into machine code. 

Interpreter works line by line whereas compiler works as a whole. 


			     translator 
Source code -------------------> object code 
			compiler/interpreter



28/04/23 

>> Computer system and data

Data is the information stored, i.e., png, jpg, mp4, etc. 

Data capturing = storing the data 
Data retrival = getting the data 

Software -- general purpose, eg. ms-word, powerpoint 
			Customised software, only used by certaing organizations and individuals 


Bigger - ALU 
Smaller - CU and MU 

RAM can be compared with a table 

Cache memory: primary but not RAM or ROM. Stores data of frequently used software. Cache memory can run programs without using much of primary memory and loading the app much faster. 

Freeware: can be used for free and distributed but not modifiable 
Free software: free to use, share, and modify the software without paying anyone for it.

Open-source software: software which allows us to see the source code. 


