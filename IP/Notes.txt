1st gen: 1946-58 - machine language - vacuum tubes - ENIAC, UNIAC 
2nd gen: 1959-64 - Assembly language (Mnemonic code (Assembler)) - Transistors - IBM140, IBM1401
3rd gen: 1965-70 - High-level language (compiler/interpreter) - integrated circuit - IBM360
4th gen: 1971-present - high-level language - microprocessor - Apple 


• The fifth generation is considered to be powered by AI with the help of natural language (the language that we use to talk with other humans)

Disadvantages: AI can demolish all creative ideas.

Burning: storing to CD 
Ripping: fetching from CD 


Software
  Logical Part
    Saved in the computer -> Programs 

System/Application software

System software is compulsory 

Application software is case-based. 

System software: Operating system, Language processor, System utilities, and device drivers

• Operating system gives a platform for the user to interact with the software. 

1995 - Windows 95 


> Language Processor 

Translates the code into machine code. 

> System utilities

System utilities are software programs or tools designed to assist in managing, optimizing, and maintaining a computer system. These utilities perform various tasks related to system management, troubleshooting, security, and performance enhancement. Here are some examples of common system utilities:

Antivirus Software: These utilities protect your computer from malicious software such as viruses, malware, and spyware by scanning and removing them.

Disk Cleanup: It helps to free up disk space by removing temporary files, system caches, and unnecessary files from your computer.

Disk Defragmenter: This utility rearranges fragmented files on a hard drive, improving access speed and overall system performance.

Backup and Recovery Tools: These utilities create backups of important files and folders and provide options for recovering data in case of system failures or accidental deletions.

Task Manager: It allows you to monitor and manage running processes, applications, and system performance. You can end unresponsive tasks or programs using the Task Manager.

Disk Partitioning Tools: These utilities enable you to divide a hard drive into multiple partitions, allowing for better organization and management of data.

Device Manager: It displays information about the hardware devices installed on your computer and allows you to update or troubleshoot device drivers.

Registry Cleaner: This utility scans and cleans the Windows registry, removing invalid entries and optimizing the system's performance.

Firewall: A firewall utility monitors network traffic and protects your computer from unauthorized access and external threats.

System Information Tools: These utilities provide detailed information about the hardware and software configuration of your computer, including the CPU, RAM, storage devices, and installed software.

Uninstaller: It helps you remove unwanted programs from your computer cleanly, ensuring that all associated files and registry entries are deleted.

File Compression Tools: These utilities compress files and folders into smaller sizes, saving disk space and making it easier to transfer or share files.



> Devices Drivers 

Device drivers are software programs that allow the operating system to communicate and interact with hardware devices connected to a computer. They act as a bridge between the hardware and the operating system, enabling the OS to control and utilize the functionality of various devices.

When a new hardware device is installed, the operating system needs to recognize and understand how to communicate with that device. This is where device drivers come into play. Device drivers provide the necessary instructions and protocols for the operating system to interact with the device effectively.

Here are a few examples of device drivers:

Display Driver: Also known as a graphics driver, it allows the operating system to communicate with the graphics card or integrated graphics chipset. Display drivers are responsible for rendering and displaying images on the monitor, controlling screen resolutions, and enabling features like hardware acceleration.

Printer Driver: This driver enables the operating system to communicate with a printer, sending print jobs and controlling various printing settings such as print quality, paper size, and orientation.

Network Adapter Driver: It allows the operating system to interact with network interface cards (NICs) or wireless adapters. The driver enables the OS to establish network connections, manage network settings, and transmit/receive data over the network.

Sound Card Driver: This driver enables the operating system to utilize the capabilities of a sound card, allowing audio playback, recording, and controlling sound settings.

Keyboard and Mouse Drivers: These drivers facilitate the communication between the operating system and the keyboard and mouse devices, translating input from these peripherals into commands that the system can understand.

Scanner Driver: It enables the operating system to control and interact with a scanner, facilitating the scanning of documents or images and transferring the data to the computer.

USB Driver: USB drivers are responsible for managing USB ports and devices connected to them. They allow the operating system to detect and use USB devices like external hard drives, flash drives, cameras, and more.

Device drivers are specific to each hardware device and operating system. Manufacturers provide driver software to ensure compatibility and proper functioning of their devices with different operating systems. It's essential to keep device drivers up to date to ensure optimal performance, stability, and compatibility with the latest software and hardware advancements.

• The problem with old computers was that the user can only use peripherals of the same company that made the device. 


24/05/23

Chapter 2 

Python is based on ABC and Modula-3 

• Python is easy to use 
• Cross-platform language
• Free and open source 
• Various uses

> Disadvantages 
1. Not the fastest language
2. Lesser libraries than C and Java 
3. Not strong on-time binding
    Python is based on alignments
4. Not easily convertible to other languages 
