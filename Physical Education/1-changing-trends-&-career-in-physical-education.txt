1. What do you mean by physical education?
Ans> Physical education means all round development or holistic development of human being through physical activities.

2. Define physical education.
Ans> According to D. Oberteuffer, "Phycial education is the sum of those experiences which comes to the individual through movements."

3. Write down the aims and objectives of physical educaion.
Ans> The aims and objectives of physical educaion are as follow: 
1. Physical developement
2. Social developement
3. Mental developement
4. Neuromuscular development
5. Development of health
6. Emotional development

Explaination of the points are as follows:

1. Physical development: It is the development of various systems of the body such as respiratory system, circulatory system, nervous system, digestive system and muscular system so that they respond in a healthy way.

2. Social development: This objective is related to the development of social traits, which are essential for better adjustment in life. Physical education activities allow players from different regions to come together and they develop relations based on turst, care, share, respect and understanding. 

3. Mental Development: Physical activities not only promote the growth of physical health but also requires alertness of mind, deep concentration and precise movements which helps in mental development.

4. Neuromuscular Coordination: Physical activities improves the relationship between the nervous system and the muscular system. This leads to help in making efficient movements of the body.

5. Development of health: Regular participation in physical activities, improve health and state of well-being. It also helps to reduce stress and anxiety. 

6. Emotional development: Every individual has various types of emotions and if a person doesn't has appropriate control over these emotions, he/she may become abnormal or uncontrollable. By participation in physical education, an individual starts having control over his/her emotions.





>>> Textbook solutions 

1. 

(i) Communication media
(ii) Both (i) and (ii) 
(iii) 12
(iv) Rabindranath Tagore
(v) Sports for film stars 
(vi) B.A.
(vii) Major Dhyan Chand
(viii) All of the above 

2. 

(i) Education 
(ii) aims
(iii) Traits 
(iv) Physical education 
(v) 29 August 2019 
(vi) Physical education

3. 

(i) True 
(ii) False 
(iii) False 
(iv) True 
(v) False  
(vi) False 


4. 

(i) Physical education is a subject or discipline that focuses on promoting physical fitness, developing motor skills, and fostering overall well-being through physical activity and exercise. It typically involves structured lessons, sports, games, and various physical activities aimed at enhancing physical health, coordination, strength, endurance, and knowledge about leading a healthy lifestyle.

(ii) The aim of physical education is to promote physical fitness, develop motor skills, and encourage a healthy and active lifestyle.

(iii) Sports journalism is a branch of journalism that focuses on reporting, analyzing, and providing commentary on sports-related news, events, and athletes. It involves covering various sports disciplines, competitions, and athletes, delivering accurate and timely information to the audience through different media platforms, such as newspapers, magazines, television, radio, and online platforms. Sports journalists provide game analysis, interviews with athletes, coaches, and officials, and offer insights into the world of sports for the enjoyment and engagement of sports enthusiasts.

(iv) Career opportunities in physical education include being a physical education teacher, sports coach, athletic director, fitness instructor, sports journalist, sports administrator, sports development officer, and sports medicine professional.

(v) Sports broadcasting refers to the coverage and live transmission of sports events through various media platforms, such as television, radio, and online streaming. It involves capturing and broadcasting live games, providing commentary, analysis, and interviews with athletes and experts. Sports broadcasting aims to bring the excitement and experience of sports to viewers and listeners, allowing them to follow and engage with sporting events from the comfort of their homes or on-the-go.

(vi) The two ovjectives of Khelo India scheme are as follows: 
1. Play field development: This includes preparation of a national inventory of playfield and sports infrastructure by GIS and development of playfields at various state and district levels. 
2. Promotion of rurula and indigenous/tribal games: Under the scheme, annual competitiions will be organized to showcase India's rural and indigenous/tribal games. 

(vii) The 2 types of playing surfaces in sports are namely- natural grass surface and artificial turf.



5. 

(i) Coaching as a career in physical education involves guiding and instructing athletes or individuals in specific sports disciplines. Coaches work closely with athletes to develop their skills, improve performance, and provide guidance and support throughout their training. They design training programs, analyze techniques, strategize game plans, and provide motivation and encouragement. Coaches also play a crucial role in fostering teamwork, discipline, and sportsmanship. They can work in schools, colleges, sports clubs, or at professional levels, helping athletes reach their full potential and achieve success in their chosen sport.

(ii) Health-related careers in physical education refer to professions that focus on promoting and improving health and well-being through physical activity, exercise, and healthy lifestyle practices. These careers may involve assessing and evaluating individuals' fitness levels, providing guidance on exercise routines, designing personalized fitness programs, and educating individuals or communities about the importance of physical activity and nutrition. Health-related careers in physical education can include positions such as fitness trainers, exercise physiologists, health coaches, wellness coordinators, public health educators, and rehabilitation specialists. The primary goal of these professionals is to enhance and maintain individuals' physical fitness, overall health, and quality of life.

(iii) The careers in Communication media are as follows: 
Advertising Executive
Broadcast Producer
Communications Manager
Content Writer
Copywriter
Editor
Journalist
Media Analyst
Media Planner
News Reporter
Public Relations Specialist
Radio Host
Social Media Manager
Television Presenter
Video Producer

(iv) There is a growing demand for personal trainers and health clubs in India due to several factors such as: 
1. Increasing Health Awareness: With rising health consciousness and a desire for a fit lifestyle, individuals are seeking professional guidance to achieve their fitness goals. Personal trainers provide personalized exercise routines and nutritional guidance tailored to individual needs.

2. Urbanization and Busy Schedules: Urban areas in India are experiencing a shift towards busier lifestyles, leaving individuals with limited time for exercise. Health clubs offer convenient fitness solutions, providing access to well-equipped facilities and professional trainers to optimize workouts within a shorter time frame. 

3. Social Influence and Peer Pressure: The influence of social media, celebrities, and peer groups has contributed to the popularity of fitness and the desire to achieve a certain physique. Health clubs and personal trainers offer a means to work towards these goals under professional supervision.

(v) Duties involved in teaching physical education include:
1. Planning and delivering lessons on various physical activities and sports.
2. Instructing and demonstrating proper techniques and skills.
3. Organizing and supervising sports events, competitions, and exercises.
4. Assessing and evaluating students' performance and progress.
5. Ensuring safety during physical activities.
6. Promoting physical fitness and healthy lifestyle practices.

(vi) Narendra Modi, the Prime Minister of India, played a crucial role in the launch of the Fit India Movement. He spearheaded and initiated the campaign, aiming to promote fitness and a healthy lifestyle across the nation. Modi's role involved advocating for physical activity, emphasizing the importance of fitness in daily life, and encouraging citizens to embrace regular exercise and sports. He actively participated in events, promoted awareness campaigns, and urged citizens to prioritize fitness for their overall well-being.



6. 

(i) The sports media related careers in the field of physical and physical education are as follows: 
1. Sports Journalism: Sports journalism reports and analyzes sports events, athletes, and teams. It keeps fans informed and engaged through news, commentary, and analysis. 
2. Book writing: Book writing in the field of physical education involves creating written works that explore various aspects of physical education, including theories, techniques, practices, and research findings. These books aim to provide knowledge, guidance, and insights to educators, students, and professionals in the field.
3. Book publishing: Book publishing in the field of physical education involves the process of producing and distributing written works related to physical education. These books cover topics such as exercise science, sports coaching, fitness instruction, and sports psychology. Publishers collaborate with authors to bring these books to market, making them available to educators, students, and professionals in the field of physical education.
4. Sports broadcasting: Sports broadcasting refers to the live or recorded transmission of sports events through various media platforms such as television, radio, and online streaming. It involves capturing and delivering real-time coverage of sporting events, including commentary, analysis, and visual representation, to audiences worldwide. Sports broadcasters play a crucial role in bringing the excitement and experience of sports to fans, providing play-by-play commentary, expert analysis, and capturing the atmosphere of the event for viewers and listeners.
5. Marketing: Sports marketing involves promoting and selling sports-related products, services, and events to target audiences. It encompasses activities such as sponsorship, advertising, branding, and public relations specifically tailored to the sports industry. Sports marketing aims to create awareness, engage fans, build brand loyalty, and generate revenue for sports organizations, teams, and athletes. It utilizes various channels, including social media, endorsements, merchandise, and experiential events, to connect with fans and maximize the commercial potential of sports.
6. Sports industry: The sports industry encompasses a wide range of businesses and activities related to sports. It includes professional sports leagues, teams, athletes, sports facilities, equipment manufacturers, media companies, sports marketing agencies, and more. The industry involves the organization, promotion, and commercialization of sports events, the development of athletes, the sale of sports-related products and services, and the broadcasting and coverage of sports. It has a significant economic impact, generates revenue through ticket sales, sponsorships, merchandising, and media rights, and plays a central role in entertaining and engaging fans worldwide.




